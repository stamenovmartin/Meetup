#!/usr/bin/env python3

import time
import re
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
import os
import glob


class CineplexxScraper:

    def __init__(self, target_date: str = None):
        self.base_url = "https://www.cineplexx.mk"
        self.driver = None
        self.raw_data_dir = "../raw_data"
        self.processed_data_dir = "../processed_data"

        if target_date:
            self.target_date = datetime.strptime(target_date, '%Y-%m-%d')
        else:
            self.target_date = datetime.now() + timedelta(days=1)

        os.makedirs(self.raw_data_dir, exist_ok=True)
        os.makedirs(self.processed_data_dir, exist_ok=True)

    def clean_old_files(self):
        old_raw_files = glob.glob(os.path.join(self.raw_data_dir, "cineplexx_raw_*.csv"))
        old_processed_files = glob.glob(os.path.join(self.processed_data_dir, "cineplexx_events_*.csv"))

        for file_path in old_raw_files + old_processed_files:
            os.remove(file_path)

    def setup_driver(self):
        chrome_options = Options()
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        chrome_options.add_argument(
            "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        self.driver.set_page_load_timeout(30)

    def close_driver(self):
        if self.driver:
            self.driver.quit()

    def get_movie_genre(self, title: str) -> str:
        title_lower = title.lower()

        if any(keyword in title_lower for keyword in
               ['–∫–∞–∫–æ –¥–∞ –≥–æ –¥—Ä–µ—Å–∏—Ä–∞—Ç–µ', '–ª–∏–ª–æ –∏ —Å—Ç–∏—á', '—à—Ç—Ä—É–º—Ñ–æ–≤–∏—Ç–µ', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–∞—Ç–∞ 4', '–ª–æ—à–∏—Ç–µ –º–æ–º—Ü–∏']):
            return '–∞–Ω–∏–º–∏—Ä–∞–Ω'
        if any(keyword in title_lower for keyword in
               ['–±–µ—Ç–º–µ–Ω', '—Å—É–ø–µ—Ä–º–µ–Ω', '–æ—Ä—É–∂—ò–∞', '—Å–≤–µ—Ç–æ—Ç —ò—É—Ä–∞', '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –º–∏—Å–∏—ò–∞', 'f1', '–≤–æ—ò–Ω–∞ –Ω–∞ —ï–≤–µ–∑–¥–∏—Ç–µ']):
            return '–∞–∫—Ü–∏—ò–∞'
        if any(keyword in title_lower for keyword in ['–ø–æ–≤–∏–∫—É–≤–∞—ö–∞', '–ø–æ—Å–ª–µ–¥–Ω–∏ –æ–±—Ä–µ–¥–∏']):
            return '—Ö–æ—Ä–æ—Ä'
        if any(keyword in title_lower for keyword in ['—Ö–∞—Ä–∏ –ø–æ—Ç–µ—Ä', '–ø–æ—á–µ—Ç–æ–∫', 'inception']):
            return '—Ñ–∞–Ω—Ç–∞–∑–∏—ò–∞'
        if any(keyword in title_lower for keyword in ['naked gun', '—É—à—Ç–µ –ø–æ–æ—Ç–∫–∞—á–µ–Ω –ø–µ—Ç–æ–∫', '–±–∞–ª-–∫–∞–Ω-–∫–∞–Ω']):
            return '–∫–æ–º–µ–¥–∏—ò–∞'
        if any(keyword in title_lower for keyword in ['–∏—Å—Ü–µ–ª–∏—Ç–µ–ª', 'bring her back']):
            return '–¥—Ä–∞–º–∞'
        if any(keyword in title_lower for keyword in ['runseokjin', 'live viewing', 'amsterdam']):
            return '–º—É–∑–∏—á–∫–∏'
        if any(keyword in title_lower for keyword in ['project hail mary', 'zweitland']):
            return '–Ω–∞—É—á–Ω–∞ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'

        return '–∞–∫—Ü–∏—ò–∞'

    def get_extra_movie_data(self, url: str) -> Dict:
        """–ë–†–ó–û –∏–∑–≤–ª–µ–∫—É–≤–∞—ö–µ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –±–µ–∑ –¥–∞ –≤–ª–µ–≥—É–≤–∞ –≤–æ —Å–µ–∫–æ—ò –ª–∏–Ω–∫"""
        extra_data = {
            'duration': '120 –º–∏–Ω',
            'director': '',
            'actors': '',
            'year': '',
            'rating': ''
        }

        # –ò–∑–≤–ª–µ—á–∏ –¥–∞—Ç—É–º –æ–¥ URL
        date_match = re.search(r'date=(\d{4}-\d{2}-\d{2})', url)
        if date_match:
            extra_data['url_date'] = date_match.group(1)

        # –ò–∑–≤–ª–µ—á–∏ ID –Ω–∞ —Ñ–∏–ª–º–æ—Ç –æ–¥ URL –∑–∞ –º–æ–∂–Ω–∞ –ø–æ–Ω–∞—Ç–∞–º–æ—à–Ω–∞ —É–ø–æ—Ç—Ä–µ–±–∞
        film_match = re.search(r'/film/([^?]+)', url)
        if film_match:
            extra_data['film_slug'] = film_match.group(1)

        return extra_data

    def scrape_movie_details(self, movie_url: str) -> Dict:
        """–í–ª–µ–≥—É–≤–∞ –≤–æ –ª–∏–Ω–∫–æ—Ç –Ω–∞ —Ñ–∏–ª–º–æ—Ç –∏ —Å–∫—Ä–µ–ø–∏—Ä–∞ –¥–µ—Ç–∞–ª–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        details = {
            'duration': '120 –º–∏–Ω',
            'director': '',
            'actors': '',
            'year': '',
            'rating': '',
            'genre_from_page': '',
            'description_full': ''
        }

        if not movie_url or movie_url == self.base_url:
            return details

        try:
            print(f"  üìÑ –í–ª–µ–≥—É–≤–∞–º –≤–æ: {movie_url}")
            self.driver.get(movie_url)
            time.sleep(3)

            # 1. –í—Ä–µ–º–µ—Ç—Ä–∞–µ—ö–µ –Ω–∞ —Ñ–∏–ª–º–æ—Ç
            duration_selectors = [
                "//*[contains(text(), '–º–∏–Ω')]",
                "//*[contains(text(), 'min')]",
                "//*[contains(text(), '—á–∞—Å')]",
                "//*[contains(text(), 'hour')]",
                "//*[contains(text(), 'H')]",
                ".movie-duration",
                ".film-duration"
            ]

            for selector in duration_selectors:
                try:
                    if selector.startswith("//"):
                        elements = self.driver.find_elements(By.XPATH, selector)
                    else:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)

                    for elem in elements:
                        text = elem.text.strip()

                        # –§–æ—Ä–º–∞—Ç: "2H 7min" –∏–ª–∏ "2h 7min"
                        hour_min_match = re.search(r'(\d+)[Hh]\s*(\d+)(?:min|–º–∏–Ω)', text)
                        if hour_min_match:
                            hours = int(hour_min_match.group(1))
                            minutes = int(hour_min_match.group(2))
                            total_minutes = hours * 60 + minutes
                            details['duration'] = f"{total_minutes} –º–∏–Ω"
                            print(f"    ‚è±Ô∏è –í—Ä–µ–º–µ—Ç—Ä–∞–µ—ö–µ: {details['duration']} ({text})")
                            break

                        # –§–æ—Ä–º–∞—Ç: "127 –º–∏–Ω" –∏–ª–∏ "127 min"
                        min_match = re.search(r'(\d+)\s*(?:–º–∏–Ω|min)', text)
                        if min_match:
                            details['duration'] = f"{min_match.group(1)} –º–∏–Ω"
                            print(f"    ‚è±Ô∏è –í—Ä–µ–º–µ—Ç—Ä–∞–µ—ö–µ: {details['duration']}")
                            break

                        # –§–æ—Ä–º–∞—Ç: "2 —á–∞—Å" –∏–ª–∏ "2 hours"
                        hour_match = re.search(r'(\d+)\s*(?:—á–∞—Å|hour)', text)
                        if hour_match:
                            hours = int(hour_match.group(1))
                            total_minutes = hours * 60
                            details['duration'] = f"{total_minutes} –º–∏–Ω"
                            print(f"    ‚è±Ô∏è –í—Ä–µ–º–µ—Ç—Ä–∞–µ—ö–µ: {details['duration']} ({text})")
                            break

                    if details['duration'] != '120 –º–∏–Ω':
                        break
                except:
                    continue

            # 2. –ñ–∞–Ω—Ä –æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
            genre_selectors = [
                ".movie-genre",
                ".film-genre",
                "[class*='genre']",
                "//*[contains(text(), '–ñ–∞–Ω—Ä')]/following-sibling::*",
                "//*[contains(text(), 'Genre')]/following-sibling::*"
            ]

            for selector in genre_selectors:
                try:
                    if selector.startswith("//"):
                        elements = self.driver.find_elements(By.XPATH, selector)
                    else:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)

                    if elements and elements[0].text.strip():
                        genre_text = elements[0].text.strip()
                        # –ó–µ–º–∏ –≥–æ –ø—Ä–≤–∏–æ—Ç –∂–∞–Ω—Ä –∞–∫–æ –∏–º–∞ –ø–æ–≤–µ—ú–µ
                        first_genre = genre_text.split(',')[0].strip()
                        if first_genre and len(first_genre) > 2:
                            details['genre_from_page'] = first_genre
                            print(f"    üé≠ –ñ–∞–Ω—Ä: {details['genre_from_page']}")
                            break
                except:
                    continue

            # 3. –†–µ–∂–∏—Å–µ—Ä
            director_selectors = [
                "//*[contains(text(), '–†–µ–∂–∏—Å–µ—Ä')]/following-sibling::*",
                "//*[contains(text(), 'Director')]/following-sibling::*",
                ".movie-director",
                ".film-director"
            ]

            for selector in director_selectors:
                try:
                    if selector.startswith("//"):
                        elements = self.driver.find_elements(By.XPATH, selector)
                    else:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)

                    if elements and elements[0].text.strip():
                        details['director'] = elements[0].text.strip()
                        print(f"    üé¨ –†–µ–∂–∏—Å–µ—Ä: {details['director']}")
                        break
                except:
                    continue

            # 4. –ê–∫—Ç–µ—Ä–∏/Cast
            actors_selectors = [
                "//*[contains(text(), '–ê–∫—Ç–µ—Ä–∏')]/following-sibling::*",
                "//*[contains(text(), 'Cast')]/following-sibling::*",
                "//*[contains(text(), 'Starring')]/following-sibling::*",
                ".movie-cast",
                ".film-cast"
            ]

            for selector in actors_selectors:
                try:
                    if selector.startswith("//"):
                        elements = self.driver.find_elements(By.XPATH, selector)
                    else:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)

                    if elements and elements[0].text.strip():
                        details['actors'] = elements[0].text.strip()
                        print(f"    üé≠ –ê–∫—Ç–µ—Ä–∏: {details['actors'][:50]}...")
                        break
                except:
                    continue

            # 5. –ì–æ–¥–∏–Ω–∞
            year_selectors = [
                "//*[contains(text(), '–ì–æ–¥–∏–Ω–∞')]/following-sibling::*",
                "//*[contains(text(), 'Year')]/following-sibling::*",
                ".movie-year",
                ".film-year"
            ]

            for selector in year_selectors:
                try:
                    if selector.startswith("//"):
                        elements = self.driver.find_elements(By.XPATH, selector)
                    else:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)

                    for elem in elements:
                        year_match = re.search(r'(19|20)\d{2}', elem.text)
                        if year_match:
                            details['year'] = year_match.group(0)
                            print(f"    üìÖ –ì–æ–¥–∏–Ω–∞: {details['year']}")
                            break
                    if details['year']:
                        break
                except:
                    continue

            # 6. –†–µ—ò—Ç–∏–Ω–≥
            rating_selectors = [
                ".movie-rating",
                ".film-rating",
                "[class*='rating']",
                "[class*='imdb']"
            ]

            for selector in rating_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if elements and elements[0].text.strip():
                        rating_text = elements[0].text.strip()
                        rating_match = re.search(r'(\d+\.?\d*)', rating_text)
                        if rating_match:
                            details['rating'] = rating_match.group(1)
                            print(f"    ‚≠ê –†–µ—ò—Ç–∏–Ω–≥: {details['rating']}")
                            break
                except:
                    continue

            # 7. –û–ø–∏—Å –Ω–∞ —Ñ–∏–ª–º–æ—Ç
            description_selectors = [
                ".movie-description",
                ".film-synopsis",
                ".movie-synopsis",
                "[class*='synopsis']",
                "[class*='description']"
            ]

            for selector in description_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if elements and elements[0].text.strip():
                        desc_text = elements[0].text.strip()
                        if len(desc_text) > 20:  # –°–∞–º–æ –∞–∫–æ –µ –ø–æ–¥–æ–ª–≥ –æ–ø–∏—Å
                            details['description_full'] = desc_text
                            print(f"    üìù –û–ø–∏—Å: {desc_text[:50]}...")
                            break
                except:
                    continue

        except Exception as e:
            print(f"    ‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–∫—Ä–µ–ø–∏—Ä–∞—ö–µ: {e}")

        return details

    def scrape_movies(self) -> List[Dict]:
        self.driver.get(self.base_url)
        time.sleep(8)

        # –§–ê–ó–ê 1: –°–æ–±–µ—Ä–∏ –≥–∏ —Å–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –æ–¥ –°–ò–¢–ï –¢–ê–ë–û–í–ò
        print("üîç –§–ê–ó–ê 1: –°–æ–±–∏—Ä–∞–º –æ—Å–Ω–æ–≤–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –æ–¥ —Å–∏—Ç–µ —Ç–∞–±–æ–≤–∏...")
        all_basic_movies = []

        # –î–µ—Ñ–∏–Ω–∏—Ä–∞—ò —Ç–∞–±–æ–≤–∏ –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
        tabs_to_try = [
            ("//span[contains(text(), '–ü—Ä–µ–ø–æ—Ä–∞—á–∞–Ω–æ')]/..", "–ü—Ä–µ–ø–æ—Ä–∞—á–∞–Ω–æ"),
            ("//span[contains(text(), '–í–æ –∫–∏–Ω–æ')]/..", "–í–æ –∫–∏–Ω–æ"),
            ("//span[contains(text(), '–ù–∞—Å–∫–æ—Ä–æ')]/..", "–ù–∞—Å–∫–æ—Ä–æ")
        ]

        selectors_to_try = [
            ".movie-list ul.l-entity li.l-entity__item",
            ".movie-list li",
            ".l-entity__item"
        ]

        # –ü—Ä–≤–æ –∑–µ–º–∏ —Ñ–∏–ª–º–æ–≤–∏ –æ–¥ —Ç–µ–∫–æ–≤–Ω–∏–æ—Ç –ø—Ä–∏–∫–∞–∑ (–±–µ–∑ –∫–ª–∏–∫–∞—ö–µ —Ç–∞–±–æ–≤–∏)
        print("üìã –°–æ–±–∏—Ä–∞–º –æ–¥ –ø–æ—á–µ—Ç–Ω–∏–æ—Ç –ø—Ä–∏–∫–∞–∑...")
        movie_items = []
        for selector in selectors_to_try:
            movie_items = self.driver.find_elements(By.CSS_SELECTOR, selector)
            if movie_items:
                print(f"   –ö–æ—Ä–∏—Å—Ç–∞–º —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector} - –Ω–∞—ò–¥–µ–Ω–∏ {len(movie_items)} items")
                break

        if movie_items:
            initial_movies = self.extract_basic_movie_data(movie_items, "–ü–æ—á–µ—Ç–µ–Ω –ø—Ä–∏–∫–∞–∑")
            all_basic_movies.extend(initial_movies)

        # –ü–æ—Ç–æ–∞ –∑–µ–º–∏ —Ñ–∏–ª–º–æ–≤–∏ –æ–¥ —Å–µ–∫–æ—ò —Ç–∞–±
        for tab_xpath, tab_name in tabs_to_try:
            try:
                print(f"\nüé≠ –°–æ–±–∏—Ä–∞–º –æ–¥ —Ç–∞–±: {tab_name}")

                # –ù–∞—ò–¥–∏ –∏ –∫–ª–∏–∫–Ω–∏ –Ω–∞ —Ç–∞–±–æ—Ç
                tab_elements = self.driver.find_elements(By.XPATH, tab_xpath)
                if not tab_elements:
                    print(f"   ‚ö†Ô∏è –¢–∞–±–æ—Ç '{tab_name}' –Ω–µ –µ –Ω–∞—ò–¥–µ–Ω")
                    continue

                # –ö–ª–∏–∫–Ω–∏ –Ω–∞ —Ç–∞–±–æ—Ç
                self.driver.execute_script("arguments[0].click();", tab_elements[0])
                time.sleep(4)

                # –ó–µ–º–∏ —Ñ–∏–ª–º–æ–≤–∏ –æ–¥ –æ–≤–æ—ò —Ç–∞–±
                movie_items = []
                for selector in selectors_to_try:
                    movie_items = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if movie_items:
                        print(f"   –ö–æ—Ä–∏—Å—Ç–∞–º —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector} - –Ω–∞—ò–¥–µ–Ω–∏ {len(movie_items)} items")
                        break

                if movie_items:
                    tab_movies = self.extract_basic_movie_data(movie_items, tab_name)
                    all_basic_movies.extend(tab_movies)
                else:
                    print(f"   ‚ùå –ù–µ–º–∞ —Ñ–∏–ª–º–æ–≤–∏ –≤–æ —Ç–∞–±–æ—Ç '{tab_name}'")

            except Exception as e:
                print(f"   ‚ùå –ì—Ä–µ—à–∫–∞ —Å–æ —Ç–∞–± '{tab_name}': {e}")
                continue

        print(f"\n‚úÖ –§–ê–ó–ê 1 –∑–∞–≤—Ä—à–µ–Ω–∞: –°–æ–±—Ä–∞–Ω–∏ {len(all_basic_movies)} —Ñ–∏–ª–º–æ–≤–∏ –æ–¥ —Å–∏—Ç–µ —Ç–∞–±–æ–≤–∏")

        # –û—Ç—Å—Ç—Ä–∞–Ω–∏ –¥—É–ø–ª–∏–∫–∞—Ç–∏ –ø—Ä–µ–¥ –¥–µ—Ç–∞–ª–Ω–æ —Å–∫—Ä–µ–ø–∏—Ä–∞—ö–µ
        unique_basic_movies = []
        seen_movies = set()
        for movie in all_basic_movies:
            movie_id = f"{movie['title'].lower()}_{movie['date_start']}"
            if movie_id not in seen_movies and movie['title']:
                unique_basic_movies.append(movie)
                seen_movies.add(movie_id)

        print(f"üßπ –ü–æ—Å–ª–µ –æ—Ç—Å—Ç—Ä–∞–Ω—É–≤–∞—ö–µ –¥—É–ø–ª–∏–∫–∞—Ç–∏: {len(unique_basic_movies)} —É–Ω–∏–∫–∞—Ç–Ω–∏ —Ñ–∏–ª–º–æ–≤–∏")

        # –§–ê–ó–ê 2: –í–ª–µ–≥—É–≤–∞—ò –≤–æ —Å–µ–∫–æ—ò –ª–∏–Ω–∫ –∏ —Å–æ–±–∏—Ä–∞—ò –¥–µ—Ç–∞–ª–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏
        print("\nüé¨ –§–ê–ó–ê 2: –°–æ–±–∏—Ä–∞–º –¥–µ—Ç–∞–ª–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏...")
        detailed_movies = []

        for i, movie in enumerate(unique_basic_movies):
            print(f"\nüé≠ {i + 1}/{len(unique_basic_movies)} - {movie['title']}")

            # –°–∫—Ä–µ–ø–∏—Ä–∞—ò –¥–µ—Ç–∞–ª–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –∞–∫–æ –∏–º–∞ –≤–∞–ª–∏–¥–µ–Ω URL
            if movie['url'] != self.base_url and '/film/' in movie['url']:
                try:
                    movie_details = self.scrape_movie_details(movie['url'])

                    # –ê–∂—É—Ä–∏—Ä–∞—ò —Å–æ –Ω–æ–≤–∏—Ç–µ –ø–æ–¥–∞—Ç–æ—Ü–∏
                    movie['duration'] = movie_details['duration']
                    movie['director'] = movie_details['director']
                    movie['actors'] = movie_details['actors']
                    movie['year'] = movie_details['year']
                    movie['rating'] = movie_details['rating']

                    # –ê–∫–æ –∏–º–∞ –∂–∞–Ω—Ä –æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞, –∫–æ—Ä–∏—Å—Ç–∏ –≥–æ
                    if movie_details['genre_from_page']:
                        movie['genre'] = movie_details['genre_from_page']

                    # –ê–∫–æ –∏–º–∞ –ø–æ–¥–µ—Ç–∞–ª–µ–Ω –æ–ø–∏—Å, –∫–æ—Ä–∏—Å—Ç–∏ –≥–æ
                    if movie_details['description_full']:
                        movie['description'] = movie_details['description_full']

                except Exception as e:
                    print(f"    ‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª–Ω–æ —Å–∫—Ä–µ–ø–∏—Ä–∞—ö–µ: {e}")
            else:
                print(f"    ‚è≠Ô∏è –ü—Ä–µ—Å–∫–æ–∫–Ω—É–≤–∞–º (–Ω–µ–º–∞ –≤–∞–ª–∏–¥–µ–Ω –ª–∏–Ω–∫)")

            detailed_movies.append(movie)

        print(f"\n‚úÖ –§–ê–ó–ê 2 –∑–∞–≤—Ä—à–µ–Ω–∞: {len(detailed_movies)} —Ñ–∏–ª–º–æ–≤–∏ —Å–æ –¥–µ—Ç–∞–ª–∏")
        print(f"üéØ –§–∏–Ω–∞–ª–Ω–æ: {len(detailed_movies)} —Ñ–∏–ª–º–æ–≤–∏")
        return detailed_movies

    def extract_basic_movie_data(self, movie_items, source_name: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–∏ –æ—Å–Ω–æ–≤–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –æ–¥ –ª–∏—Å—Ç–∞ –Ω–∞ movie items"""
        movies = []

        for i, item in enumerate(movie_items):
            try:
                movie_data = {
                    'event_id': '',
                    'url': self.base_url,
                    'title': '',
                    'date_start': self.target_date.strftime('%Y-%m-%d'),
                    'time_start': '19:00',
                    'location': 'Cineplexx Skopje City Mall',
                    'ticket_price': '250 MKD',
                    'ticket_url': self.base_url,
                    'description': '',
                    'category': 'cinema',
                    'organiser': 'Cineplexx',
                    'duration': '120 –º–∏–Ω',
                    'genre': '',
                    'director': '',
                    'actors': '',
                    'year': '',
                    'rating': '',
                    'poster_url': '',
                    'scraped_at': datetime.now().isoformat()
                }

                # –ò–∑–≤–ª–µ—á–∏ URL
                try:
                    links = item.find_elements(By.CSS_SELECTOR, 'a')
                    if links:
                        href = links[0].get_attribute('href')
                        if href:
                            movie_data['url'] = href if href.startswith('http') else self.base_url + href
                            movie_data['ticket_url'] = movie_data['url']

                            # –ò–∑–≤–ª–µ—á–∏ –¥–∞—Ç—É–º –æ–¥ URL
                            date_match = re.search(r'date=(\d{4}-\d{2}-\d{2})', href)
                            if date_match:
                                movie_data['date_start'] = date_match.group(1)
                except:
                    pass

                # –ò–∑–≤–ª–µ—á–∏ –Ω–∞—Å–ª–æ–≤ –∏ poster
                try:
                    imgs = item.find_elements(By.CSS_SELECTOR, 'img')
                    if imgs:
                        alt_text = imgs[0].get_attribute('alt')
                        if alt_text:
                            movie_data['title'] = re.sub(r'\s+', ' ', alt_text.strip())
                            movie_data['poster_url'] = imgs[0].get_attribute('src')
                except:
                    pass

                # –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ–Ω –Ω–∞—Å–ª–æ–≤
                if not movie_data['title']:
                    try:
                        captions = item.find_elements(By.CSS_SELECTOR, '.l-entity__figure-caption')
                        if captions and captions[0].text.strip():
                            movie_data['title'] = re.sub(r'\s+', ' ', captions[0].text.strip())
                    except:
                        pass

                # –ò–∑–≤–ª–µ—á–∏ –¥–∞—Ç—É–º –æ–¥ DOM –∞–∫–æ –Ω–µ –µ –∑–µ–º–µ–Ω –æ–¥ URL
                if movie_data['date_start'] == self.target_date.strftime('%Y-%m-%d'):
                    try:
                        date_elements = item.find_elements(By.CSS_SELECTOR, '.l-entity__figure-caption_startDate')
                        if date_elements:
                            date_text = date_elements[0].text
                            match = re.search(r'(\d{1,2})\.(\d{1,2})\.(\d{4})', date_text)
                            if match:
                                day, month, year = match.groups()
                                movie_data['date_start'] = f"{year}-{month:0>2}-{day:0>2}"
                    except:
                        pass

                # –î–æ–¥–∞—ò –∞–∫–æ –∏–º–∞ –Ω–∞—Å–ª–æ–≤
                if movie_data['title']:
                    clean_title = re.sub(r'[^\w\s]', '', movie_data['title'])
                    date_str = movie_data['date_start'].replace('-', '')
                    movie_data['event_id'] = f"cineplexx_{date_str}_{hash(clean_title) % 10000}"
                    movie_data['genre'] = self.get_movie_genre(movie_data['title'])
                    movie_data['description'] = f"–ö–∏–Ωo –ø—Ä–æ–µ–∫—Ü–∏—ò–∞ –Ω–∞ {movie_data['title']}"

                    if "(Open Air Cinema)" in movie_data['title']:
                        movie_data['category'] = 'outdoor_cinema'

                    movies.append(movie_data)
                    print(f"   {len(movies)}. {movie_data['title']}")

            except Exception as e:
                continue

        print(f"   ‚úÖ {source_name}: {len(movies)} —Ñ–∏–ª–º–æ–≤–∏")
        return movies

    def save_data(self, movies: List[Dict]):
        if not movies:
            return

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

        # Raw data (–æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏ –∫–æ–ª–æ–Ω–∏ –∑–∞ backup)
        df_raw = pd.DataFrame(movies)
        raw_path = f"{self.raw_data_dir}/cineplexx_raw_{timestamp}.csv"
        df_raw.to_csv(raw_path, index=False, encoding='utf-8')

        # Processed data (—Å—Ç–∞–Ω–¥–∞—Ä–¥–∏–∑–∏—Ä–∞–Ω–∏ –∫–æ–ª–æ–Ω–∏ —Å–ø–æ—Ä–µ–¥ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞—Ç–∞)
        processed_events = []
        for movie in movies:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞—ò timestamp
            try:
                dt = datetime.strptime(f"{movie['date_start']} {movie['time_start']}", '%Y-%m-%d %H:%M')
                timestamp_unix = int(dt.timestamp())
            except:
                timestamp_unix = int(datetime.now().timestamp())

            # –û–¥—Ä–µ–¥–∏ –¥–∞–ª–∏ –µ –±–µ—Å–ø–ª–∞—Ç–µ–Ω –∏–ª–∏ —Å–æ —Ü–µ–Ω–∞
            is_free = False
            if '–±–µ—Å–ø–ª–∞—Ç–µ–Ω' in movie.get('ticket_price', '').lower() or movie.get('ticket_price', '') == '0':
                is_free = True

            processed_event = {
                'Event ID': movie.get('event_id', ''),
                'Title': movie.get('title', ''),
                'Category/Tags': movie.get('genre', 'cinema'),
                'Date/Time': f"{movie.get('date_start', '')} {movie.get('time_start', '')}",
                'Timestamp': timestamp_unix,
                'Location': movie.get('location', 'Cineplexx Skopje City Mall'),
                'Description': movie.get('description', ''),
                'Organizer Name': movie.get('organiser', 'Cineplexx'),
                'Ticket Price': movie.get('ticket_price', '250 MKD'),
                'Free Flag': is_free,
                'Ticket URL': movie.get('ticket_url', movie.get('url', ''))
            }
            processed_events.append(processed_event)

        # –ó–∞—á—É–≤–∞—ò processed data
        df_processed = pd.DataFrame(processed_events)
        processed_path = f"{self.processed_data_dir}/cineplexx_events_{timestamp}.csv"
        df_processed.to_csv(processed_path, index=False, encoding='utf-8')

        print(f"üíæ –ó–∞—á—É–≤–∞–Ω–æ:")
        print(f"   üìÑ Raw data: {raw_path}")
        print(f"   üìä Processed data: {processed_path}")

    def run_scraping(self) -> Dict:
        self.clean_old_files()
        self.setup_driver()

        movies = self.scrape_movies()

        if movies:
            self.save_data(movies)

        self.close_driver()

        return {
            'movies': movies,
            'total_movies': len(movies),
            'target_date': self.target_date.strftime('%Y-%m-%d'),
            'scraping_timestamp': datetime.now().isoformat()
        }


def main():
    scraper = CineplexxScraper()
    results = scraper.run_scraping()

    if results['total_movies'] > 0:
        print(f"‚úÖ –ù–∞—ò–¥–µ–Ω–∏ {results['total_movies']} —Ñ–∏–ª–º–æ–≤–∏!")
    else:
        print("‚ùå –ù–µ–º–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏")


if __name__ == "__main__":
    main()