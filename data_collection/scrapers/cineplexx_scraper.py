#!/usr/bin/env python3

import time
import re
from datetime import datetime, timedelta
from typing import List, Dict
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
import os
import glob
import hashlib


class CineplexxScraper:

    def __init__(self, target_date: str = None):
        self.base_url = "https://www.cineplexx.mk"
        self.driver = None
        self.raw_data_dir = "../raw_data"
        self.processed_data_dir = "../processed_data"

        if target_date:
            self.target_date = datetime.strptime(target_date, '%Y-%m-%d')
        else:
            self.target_date = datetime.now() + timedelta(days=1)

        os.makedirs(self.raw_data_dir, exist_ok=True)
        os.makedirs(self.processed_data_dir, exist_ok=True)

    def clean_old_files(self):
        old_raw_files = glob.glob(os.path.join(self.raw_data_dir, "cineplexx_raw_*.csv"))
        old_processed_files = glob.glob(os.path.join(self.processed_data_dir, "cineplexx_events_*.csv"))

        for file_path in old_raw_files + old_processed_files:
            os.remove(file_path)

    def setup_driver(self):
        chrome_options = Options()
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        chrome_options.add_argument(
            "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        self.driver.set_page_load_timeout(30)

    def close_driver(self):
        if self.driver:
            self.driver.quit()

    def generate_event_id(self, title: str, date: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ —É–Ω–∏–∫–∞—Ç–µ–Ω event_id"""
        clean_title = re.sub(r'[^\w\s]', '', title.lower())
        combined = f"{clean_title}_{date}"
        return hashlib.md5(combined.encode()).hexdigest()

    def scrape_movie_details(self, movie_url: str) -> Dict:
        """–í–ª–µ–≥—É–≤–∞ –≤–æ –ª–∏–Ω–∫–æ—Ç –Ω–∞ —Ñ–∏–ª–º–æ—Ç –∏ —Å–∫—Ä–µ–ø–∏—Ä–∞ –¥–µ—Ç–∞–ª–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏"""
        details = {
            'description_full': '',
            'genre': '',
            'director': '',
            'actors': '',
            'duration': '',
            'year': '',
        }

        if not movie_url or movie_url == self.base_url:
            return details

        try:
            print(f" –ì–æ –∫–æ—Ä–∏—Å—Ç–∞–º –ª–∏–Ω–∫–æ—Ç : {movie_url}")
            self.driver.get(movie_url)
            time.sleep(3)

            # 1. –ñ–∞–Ω—Ä
            try:
                genre_element = self.driver.find_element(By.CSS_SELECTOR, ".b-title-with-poster__genre")
                if genre_element and genre_element.text.strip():
                    details['genre'] = genre_element.text.strip()
                    print(f"–ñ–∞–Ω—Ä: {details['genre']}")
            except:
                print(f"–ñ–∞–Ω—Ä –Ω–µ –Ω–∞—ò–¥–µ–Ω")

            # 2. –†–µ–∂–∏—Å–µ—Ä
            try:
                director_element = self.driver.find_element(By.XPATH,
                                                            "//strong[contains(text(), '–†–µ–∂–∏—Å–µ—Ä–∏')]/following-sibling::span")
                if director_element and director_element.text.strip():
                    details['director'] = director_element.text.strip()
                    print(f"–†–µ–∂–∏—Å–µ—Ä: {details['director']}")
            except:
                print(f"–†–µ–∂–∏—Å–µ—Ä –Ω–µ –Ω–∞—ò–¥–µ–Ω")

            # 3. –ê–∫—Ç–µ—Ä–∏
            try:
                actors_element = self.driver.find_element(By.XPATH,
                                                          "//strong[contains(text(), '–ì–ª—É–º—Ü–∏')]/following-sibling::span")
                if actors_element and actors_element.text.strip():
                    details['actors'] = actors_element.text.strip()
                    print(f"–ê–∫—Ç–µ—Ä–∏: {details['actors'][:50]}...")
            except:
                print(f"–ù–µ–º–∞ –∞–∫—Ç–µ—Ä–∏")

            # 4. –í—Ä–µ–º–µ—Ç—Ä–∞–µ—ö–µ
            print(f"–í—Ä–µ–º–µ—Ç—Ä–∞–µ—ö–µ...")
            try:
                # –ü—Ä–≤–∏–Ω —Å–∏—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏ —Å–æ —Ç–∞–∞ –∫–ª–∞—Å–∞
                all_duration_elements = self.driver.find_elements(By.CSS_SELECTOR, ".b-title-with-poster__duration")
                print(f"–ù–∞—ò–¥–µ–Ω–∏ —Å–µ {len(all_duration_elements)} –µ–ª–µ–º–µ–Ω—Ç–∏ —Å–æ .b-title-with-poster__duration")

                for i, elem in enumerate(all_duration_elements):
                    text = elem.text.strip()
                    html = elem.get_attribute('innerHTML')
                    print(f"    üîç –ï–ª–µ–º–µ–Ω—Ç {i + 1}: text='{text}', html='{html}'")

                    if text:
                        details['duration'] = text
                        print(f"    ‚è±Ô∏è –í—Ä–µ–º–µ—Ç—Ä–∞–µ—ö–µ –£–°–ü–ï–®–ù–û –æ–¥ –µ–ª–µ–º–µ–Ω—Ç {i + 1}: {details['duration']}")
                        break

                if not details['duration']:
                    print(f"    üîç –ù–µ–º–∞ —Ç–µ–∫—Å—Ç –≤–æ duration –µ–ª–µ–º–µ–Ω—Ç–∏, —á–µ–∫–∞–º 5 —Å–µ–∫ –ø–æ–≤–µ—ú–µ...")
                    time.sleep(5)

                    duration_element = self.driver.find_element(By.CSS_SELECTOR, ".b-title-with-poster__duration")
                    if duration_element:
                        text = duration_element.text.strip()
                        html = duration_element.get_attribute('innerHTML')
                        print(f"    üîç –ü–æ—Å–ª–µ —á–µ–∫–∞—ö–µ: text='{text}', html='{html}'")

                        if text:
                            details['duration'] = text
                            print(f"    ‚è±Ô∏è –í—Ä–µ–º–µ—Ç—Ä–∞–µ—ö–µ –µ –£–°–ü–ï–®–ù–û –ø–æ—Å–ª–µ —á–µ–∫–∞—ö–µ: {details['duration']}")

            except Exception as e:
                print(f"–ì—Ä–µ—à–∫–∞ –≤–æ duration debugging: {e}")

            if not details['duration']:
                print(f"–í—Ä–µ–º–µ—Ç—Ä–∞–µ—ö–µ—Ç–æ –Ω–µ –º–æ–∂–∞–º –¥–∞ –≥–æ –Ω–∞—ò–¥–∞–º!")

            # 5. –ì–æ–¥–∏–Ω–∞ –æ–¥ –¥–∞—Ç—É–º
            try:
                date_element = self.driver.find_element(By.XPATH,
                                                        "//strong[contains(text(), '–î–∞—Ç—É–º –Ω–∞ –ø–æ—á–µ—Ç–æ–∫')]/following-sibling::span")
                if date_element and date_element.text.strip():
                    date_text = date_element.text.strip()
                    year_match = re.search(r'(\d{4})', date_text)
                    if year_match:
                        details['year'] = year_match.group(1)
                        print(f"–ì–æ–¥–∏–Ω–∞: {details['year']}")
            except:
                print(f"–ì–æ–¥–∏–Ω–∞ –Ω–µ –Ω–∞—ò–¥–µ–Ω–∞")


            # 7. –û–ø–∏—Å
            try:
                description_elements = self.driver.find_elements(By.CSS_SELECTOR, ".b-movie-description__text")
                for elem in description_elements:
                    if elem.text.strip() and len(elem.text.strip()) > 20:
                        if not details['description_full']:  # –ó–µ–º–∏ –≥–æ –ø—Ä–≤–∏–æ—Ç –æ–ø–∏—Å
                            details['description_full'] = elem.text.strip()
                        else:
                            # –î–æ–¥–∞—ò –≥–æ —Å–ª–µ–¥–Ω–∏–æ—Ç –æ–ø–∏—Å
                            details['description_full'] += " " + elem.text.strip()

                if details['description_full']:
                    print(f"–û–ø–∏—Å –∑–∞ —Ñ–∏–ª–º–æ—Ç: {details['description_full'][:50]}...")
            except:
                print(f"–ù–µ–º–∞ –æ–ø–∏—Å")

        except Exception as e:
            print(f"–ì—Ä–µ—à–∫–∞ {e}")

        return details

    def scrape_movies(self) -> List[Dict]:
        self.driver.get(self.base_url)
        time.sleep(8)

        print("–°–æ–±–∏—Ä–∞—ö–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –æ–¥ —Ç—Ä–∏—Ç–µ —Ç–∞–±–æ–≤–∏")
        all_basic_movies = []

        tabs_to_try = [
            ("//span[contains(text(), '–ü—Ä–µ–ø–æ—Ä–∞—á–∞–Ω–æ')]/..", "–ü—Ä–µ–ø–æ—Ä–∞—á–∞–Ω–æ"),
            ("//span[contains(text(), '–í–æ –∫–∏–Ω–æ')]/..", "–í–æ –∫–∏–Ω–æ"),
            ("//span[contains(text(), '–ù–∞—Å–∫–æ—Ä–æ')]/..", "–ù–∞—Å–∫–æ—Ä–æ")
        ]

        selectors_to_try = [
            ".movie-list ul.l-entity li.l-entity__item",
            ".movie-list li",
            ".l-entity__item"
        ]

        print("–°–æ–±–∏—Ä–∞–º –æ–¥ –ø–æ—á–µ—Ç–Ω–∏–æ—Ç –ø—Ä–∏–∫–∞–∑...")
        movie_items = []
        for selector in selectors_to_try:
            movie_items = self.driver.find_elements(By.CSS_SELECTOR, selector)
            if movie_items:
                print(f"   –ö–æ—Ä–∏—Å—Ç–∞–º —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector} - –Ω–∞—ò–¥–µ–Ω–∏ {len(movie_items)} items")
                break

        if movie_items:
            initial_movies = self.extract_basic_movie_data(movie_items, "–ü–æ—á–µ—Ç–µ–Ω –ø—Ä–∏–∫–∞–∑")
            all_basic_movies.extend(initial_movies)

        for tab_xpath, tab_name in tabs_to_try:
            try:
                print(f"\n–°–æ–±–∏—Ä–∞–º –æ–¥ —Ç–∞–±: {tab_name}")

                tab_elements = self.driver.find_elements(By.XPATH, tab_xpath)
                if not tab_elements:
                    print(f"–¢–∞–±–æ—Ç '{tab_name}' –Ω–µ –µ –Ω–∞—ò–¥–µ–Ω")
                    continue

                self.driver.execute_script("arguments[0].click();", tab_elements[0])
                time.sleep(4)

                movie_items = []
                for selector in selectors_to_try:
                    movie_items = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if movie_items:
                        print(f"   –ö–æ—Ä–∏—Å—Ç–∞–º —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector} - –Ω–∞—ò–¥–µ–Ω–∏ {len(movie_items)} items")
                        break

                if movie_items:
                    tab_movies = self.extract_basic_movie_data(movie_items, tab_name)
                    all_basic_movies.extend(tab_movies)
                else:
                    print(f"–ù–µ–º–∞ —Ñ–∏–ª–º–æ–≤–∏ –≤–æ —Ç–∞–±–æ—Ç '{tab_name}'")

            except Exception as e:
                print(f"–ì—Ä–µ—à–∫–∞ —Å–æ —Ç–∞–± '{tab_name}': {e}")
                continue

        print(f"\n–°–æ–±—Ä–∞–Ω–∏ {len(all_basic_movies)} —Ñ–∏–ª–º–æ–≤–∏ –æ–¥ —Å–∏—Ç–µ —Ç–∞–±–æ–≤–∏")

        # –û—Ç—Å—Ç—Ä–∞–Ω–∏ –¥—É–ø–ª–∏–∫–∞—Ç–∏ –ø—Ä–µ–¥ –¥–µ—Ç–∞–ª–Ω–æ —Å–∫—Ä–µ–ø–∏—Ä–∞—ö–µ
        unique_basic_movies = []
        seen_movies = set()
        for movie in all_basic_movies:
            movie_id = f"{movie['title'].lower()}_{movie['date_start']}"
            if movie_id not in seen_movies and movie['title']:
                unique_basic_movies.append(movie)
                seen_movies.add(movie_id)

        print(f"–û—Ç—Å—Ç—Ä–∞–Ω—É–≤–∞—ö–µ –Ω–∞ –¥—É–ø–ª–∏–∫–∞—Ç–∏: {len(unique_basic_movies)} —É–Ω–∏–∫–∞—Ç–Ω–∏ —Ñ–∏–ª–º–æ–≤–∏")

        print("\n–°–æ–±–∏—Ä–∞–º –¥–µ—Ç–∞–ª–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏...")
        detailed_movies = []

        for i, movie in enumerate(unique_basic_movies):
            print(f"\nüé≠ {i + 1}/{len(unique_basic_movies)} - {movie['title']}")

            if movie['url'] != self.base_url and '/film/' in movie['url']:
                try:
                    movie_details = self.scrape_movie_details(movie['url'])

                    if movie_details['description_full']:
                        movie['description'] = movie_details['description_full']
                    if movie_details['genre']:
                        movie['genre'] = movie_details['genre']
                    if movie_details['director']:
                        movie['director'] = movie_details['director']
                    if movie_details['actors']:
                        movie['actors'] = movie_details['actors']
                    if movie_details['duration']:
                        movie['duration'] = movie_details['duration']
                    if movie_details['year']:
                        movie['year'] = movie_details['year']


                except Exception as e:
                    print(f"–ì—Ä–µ—à–∫–∞ {e}")
            else:
                print(f"–ü—Ä–µ—Å–∫–æ–∫–Ω—É–≤–∞–º (–Ω–µ–º–∞ –≤–∞–ª–∏–¥–µ–Ω –ª–∏–Ω–∫)")

            detailed_movies.append(movie)

        print(f"\n–ó–∞–≤—Ä—à–µ–Ω–æ: {len(detailed_movies)} —Ñ–∏–ª–º–æ–≤–∏ —Å–æ –¥–µ—Ç–∞–ª–∏")
        print(f"–§–∏–Ω–∞–ª–Ω–æ: {len(detailed_movies)} —Ñ–∏–ª–º–æ–≤–∏")
        return detailed_movies

    def extract_basic_movie_data(self, movie_items, source_name: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–∏ –æ—Å–Ω–æ–≤–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –æ–¥ –ª–∏—Å—Ç–∞ –Ω–∞ movie items"""
        movies = []

        for i, item in enumerate(movie_items):
            try:
                movie_data = {
                    'event_id': '',
                    'url': self.base_url,
                    'title': '',
                    'date_start': self.target_date.strftime('%d %B'),
                    'time_start': '19:00',
                    'location': 'Cineplexx - Skopje',
                    'ticket_url': '',
                    'ticket_price_text': '250 –¥–µ–Ω.',
                    'ticket_free': False,
                    'description': '',
                    'category': 'movie',
                    'organizer': 'Cineplexx',
                    'genre': '',
                    'director': '',
                    'actors': '',
                    'duration': '',
                    'year': '',
                }

                try:
                    links = item.find_elements(By.CSS_SELECTOR, 'a')
                    if links:
                        href = links[0].get_attribute('href')
                        if href:
                            movie_data['url'] = href if href.startswith('http') else self.base_url + href
                            movie_data['ticket_url'] = movie_data['url']

                            # –ò–∑–≤–ª–µ—á–∏ –¥–∞—Ç—É–º –æ–¥ URL
                            date_match = re.search(r'date=(\d{4}-\d{2}-\d{2})', href)
                            if date_match:
                                date_obj = datetime.strptime(date_match.group(1), '%Y-%m-%d')
                                # –§–æ—Ä–º–∞—Ç–∏—Ä–∞—ò –∫–∞–∫–æ "21 –ú–∞—Ä—Ç"
                                months_mk = {
                                    1: '–à–∞–Ω—É–∞—Ä–∏', 2: '–§–µ–≤—Ä—É–∞—Ä–∏', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–∏–ª',
                                    5: '–ú–∞—ò', 6: '–à—É–Ω–∏', 7: '–à—É–ª–∏', 8: '–ê–≤–≥—É—Å—Ç',
                                    9: '–°–µ–ø—Ç–µ–º–≤—Ä–∏', 10: '–û–∫—Ç–æ–º–≤—Ä–∏', 11: '–ù–æ–µ–º–≤—Ä–∏', 12: '–î–µ–∫–µ–º–≤—Ä–∏'
                                }
                                movie_data['date_start'] = f"{date_obj.day} {months_mk[date_obj.month]}"
                except:
                    pass

                # –ò–∑–≤–ª–µ—á–∏ –Ω–∞—Å–ª–æ–≤
                try:
                    imgs = item.find_elements(By.CSS_SELECTOR, 'img')
                    if imgs:
                        alt_text = imgs[0].get_attribute('alt')
                        if alt_text:
                            movie_data['title'] = re.sub(r'\s+', ' ', alt_text.strip())
                except:
                    pass

                # –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ–Ω –Ω–∞—Å–ª–æ–≤
                if not movie_data['title']:
                    try:
                        captions = item.find_elements(By.CSS_SELECTOR, '.l-entity__figure-caption')
                        if captions and captions[0].text.strip():
                            movie_data['title'] = re.sub(r'\s+', ' ', captions[0].text.strip())
                    except:
                        pass

                # –ò–∑–≤–ª–µ—á–∏ –¥–∞—Ç—É–º –æ–¥ DOM –∞–∫–æ –Ω–µ –µ –∑–µ–º–µ–Ω –æ–¥ URL
                if movie_data['date_start'] == self.target_date.strftime('%d %B'):
                    try:
                        date_elements = item.find_elements(By.CSS_SELECTOR, '.l-entity__figure-caption_startDate')
                        if date_elements:
                            date_text = date_elements[0].text
                            match = re.search(r'(\d{1,2})\.(\d{1,2})\.(\d{4})', date_text)
                            if match:
                                day, month, year = match.groups()
                                date_obj = datetime(int(year), int(month), int(day))
                                months_mk = {
                                    1: '–à–∞–Ω—É–∞—Ä–∏', 2: '–§–µ–≤—Ä—É–∞—Ä–∏', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–∏–ª',
                                    5: '–ú–∞—ò', 6: '–à—É–Ω–∏', 7: '–à—É–ª–∏', 8: '–ê–≤–≥—É—Å—Ç',
                                    9: '–°–µ–ø—Ç–µ–º–≤—Ä–∏', 10: '–û–∫—Ç–æ–º–≤—Ä–∏', 11: '–ù–æ–µ–º–≤—Ä–∏', 12: '–î–µ–∫–µ–º–≤—Ä–∏'
                                }
                                movie_data['date_start'] = f"{date_obj.day} {months_mk[date_obj.month]}"
                    except:
                        pass

                # –î–æ–¥–∞—ò –∞–∫–æ –∏–º–∞ –Ω–∞—Å–ª–æ–≤
                if movie_data['title']:
                    movie_data['event_id'] = self.generate_event_id(movie_data['title'], movie_data['date_start'])
                    movie_data['description'] = f"–ö–∏–Ω–æ –ø—Ä–æ–µ–∫—Ü–∏—ò–∞ –Ω–∞ {movie_data['title']}"

                    movies.append(movie_data)
                    print(f"   {len(movies)}. {movie_data['title']}")

            except Exception as e:
                continue

        print(f"   ‚úÖ {source_name}: {len(movies)} —Ñ–∏–ª–º–æ–≤–∏")
        return movies

    def save_data(self, movies: List[Dict]):
        if not movies:
            return

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

        # Raw data (–æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏ –∫–æ–ª–æ–Ω–∏ –∑–∞ backup)
        df_raw = pd.DataFrame(movies)
        raw_path = f"{self.raw_data_dir}/cineplexx_raw_{timestamp}.csv"
        df_raw.to_csv(raw_path, index=False, encoding='utf-8')

        # Processed data (—Å–ø–æ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç–æ—Ç –Ω–∞ –§–∏–ª—Ö–∞—Ä–º–æ–Ω–∏—ò–∞—Ç–∞ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–∏ –ø–æ–ª–∏—ö–∞)
        processed_events = []
        for movie in movies:
            processed_event = {
                'event_id': movie.get('event_id', ''),
                'url': movie.get('url', ''),
                'title': movie.get('title', ''),
                'date_start': movie.get('date_start', ''),
                'time_start': movie.get('time_start', ''),
                'location': movie.get('location', ''),
                'ticket_url': movie.get('ticket_url', ''),
                'ticket_price_text': movie.get('ticket_price_text', ''),
                'ticket_free': movie.get('ticket_free', False),
                'description': movie.get('description', ''),
                'categories': [movie.get('category', 'movie')],
                'organizer': movie.get('organizer', ''),
                # –î–æ–¥–∞—ò –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–∏ –ø–æ–ª–∏—ö–∞
                'genre': movie.get('genre', ''),
                'director': movie.get('director', ''),
                'actors': movie.get('actors', ''),
                'duration': movie.get('duration', ''),
                'year': movie.get('year', ''),
            }
            processed_events.append(processed_event)

        # –ó–∞—á—É–≤–∞—ò processed data
        df_processed = pd.DataFrame(processed_events)
        processed_path = f"{self.processed_data_dir}/cineplexx_events_{timestamp}.csv"
        df_processed.to_csv(processed_path, index=False, encoding='utf-8')

        print(f"Raw data: {raw_path}")
        print(f"Processed data: {processed_path}")

    def run_scraping(self) -> Dict:
        self.clean_old_files()
        self.setup_driver()

        movies = self.scrape_movies()

        if movies:
            self.save_data(movies)

        self.close_driver()

        return {
            'movies': movies,
            'total_movies': len(movies),
            'target_date': self.target_date.strftime('%Y-%m-%d'),
            'scraping_timestamp': datetime.now().isoformat()
        }


def main():
    scraper = CineplexxScraper()
    results = scraper.run_scraping()

    if results['total_movies'] > 0:
        print(f"–ù–∞—ò–¥–µ–Ω–∏ {results['total_movies']} —Ñ–∏–ª–º–æ–≤–∏!")
    else:
        print("–ù–µ–º–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏")


if __name__ == "__main__":
    main()